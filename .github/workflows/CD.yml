name: CD

on:
    workflow_dispatch:
        inputs:
            version:
                description: "版本号"
                required: true
                type: string
            prerelease:
                description: "是否是预发布版本"
                required: false
                type: boolean

env:
    GOPROXY: goproxy.io,direct
    VERSION: ${{ github.event.inputs.version }}
    PRERELEASE: ${{ github.event.inputs.prerelease }}

jobs:
    build:
        name: 编译程序
        runs-on: windows-latest
        strategy:
            matrix:
                arch:
                    - amd64
                    - "386"
        env:
            GOOS: windows
            GOARCH: ${{ matrix.arch }}
        steps:
            - uses: actions/checkout@v4
            - name: 构建
              run: go build -v -o ${{ github.workspace }}\${{ matrix.arch }}.exe ${{ github.workspace }}\cmd\MCST\main.go
            - name: 上传
              uses: actions/upload-artifact@v4
              with:
                  name: ${{ matrix.arch }}
                  path: ${{ github.workspace }}\${{ matrix.arch }}.exe

    source:
        name: 打包源码
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4
            - name: 打包
              run: |
                  cd ${{ github.workspace }}
                  tar -czvf source.tar.gz LICENSE.txt README.md --exclude=.git  --exclude=*.tar* .
                  tar -cjvf source.tar.bz2 LICENSE.txt README.md --exclude=.git  --exclude=*.tar* .
                  tar -cJvf source.tar.xz LICENSE.txt README.md --exclude=.git  --exclude=*.tar* .
            - name: 上传
              uses: actions/upload-artifact@v4
              with:
                  name: source
                  path: |
                      ${{ github.workspace }}/source.tar.gz
                      ${{ github.workspace }}/source.tar.bz2
                      ${{ github.workspace }}/source.tar.xz

    publish:
        name: 发布
        runs-on: ubuntu-latest
        needs:
            - build
            - source
        steps:
            - uses: actions/checkout@v4
            - name: 下载编译结果 (amd64)
              uses: actions/download-artifact@v4
              with:
                  name: amd64
                  path: packages
            - name: 下载编译结果 (i386)
              uses: actions/download-artifact@v4
              with:
                  name: "386"
                  path: packages
            - name: 下载打包后源码
              uses: actions/download-artifact@v4
              with:
                  name: source
                  path: packages
            - name: 重命名并打包可执行程序
              run: |
                  cd packages
                  mv source.tar.gz MCST-${{ env.VERSION }}.tar.gz
                  mv source.tar.bz2 MCST-${{ env.VERSION }}.tar.bz2
                  mv source.tar.xz MCST-${{ env.VERSION }}.tar.xz
                  mv amd64.exe MCST.exe
                  zip MCST-${{ env.VERSION }}-x64.zip ../LICENSE.txt ../README.md MCST.exe
                  mv 386.exe MCST.exe
                  zip MCST-${{ env.VERSION }}-x86.zip ../LICENSE.txt ../README.md MCST.exe
            - name: 发布到 GitHub Releases
              uses: softprops/action-gh-release@v2
              with:
                  files: |
                      packages/MCST-${{ env.VERSION }}.tar.gz
                      packages/MCST-${{ env.VERSION }}.tar.bz2
                      packages/MCST-${{ env.VERSION }}.tar.xz
                      packages/MCST-${{ env.VERSION }}-x64.zip
                      packages/MCST-${{ env.VERSION }}-x86.zip
                  tag_name: v${{ env.VERSION }}
                  name: Minecraft Server Tool v${{ env.VERSION }}
                  prerelease: ${{ env.PRERELEASE }}
                  draft: true
